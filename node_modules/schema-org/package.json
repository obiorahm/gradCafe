{
  "_args": [
    [
      {
        "name": "schema-org",
        "raw": "schema-org",
        "rawSpec": "",
        "scope": null,
        "spec": "latest",
        "type": "tag"
      },
      "/Users/mmachiobiorah/gradCafe"
    ]
  ],
  "_from": "schema-org@latest",
  "_id": "schema-org@0.2.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/schema-org",
  "_npmUser": {
    "email": "charlie.robbins@gmail.com",
    "name": "indexzero"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {},
  "_requested": {
    "name": "schema-org",
    "raw": "schema-org",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/schema-org/-/schema-org-0.2.1.tgz",
  "_shasum": "81ccef665c2ecb7a84cf53714df9c054d18b8e53",
  "_shrinkwrap": null,
  "_spec": "schema-org",
  "_where": "/Users/mmachiobiorah/gradCafe",
  "author": {
    "email": "charlie.robbins@gmail.com",
    "name": "Charlie Robbins"
  },
  "bin": {
    "list-schema": "./bin/list-schemas",
    "parse-schema": "./bin/parse-schema",
    "read-schema-org": "./bin/read-schema-org"
  },
  "bugs": {
    "url": "https://github.com/indexzero/node-schema-org/issues"
  },
  "dependencies": {
    "async": "0.1.x",
    "cliff": "0.x.x",
    "colors": "0.6.0-1",
    "jsdom": "0.3.x",
    "neuron": "0.4.x",
    "optimist": "0.3.x",
    "pkginfo": "0.2.x",
    "request": "2.x.x",
    "validator": "0.4.x",
    "winston": "~0.6.2"
  },
  "description": "A node.js library that retrieves, parses and provides all schemas from schema.org",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "81ccef665c2ecb7a84cf53714df9c054d18b8e53",
    "tarball": "https://registry.npmjs.org/schema-org/-/schema-org-0.2.1.tgz"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "homepage": "https://github.com/indexzero/node-schema-org#readme",
  "keywords": [
    "schemas",
    "jsdom",
    "parsers"
  ],
  "main": "./lib",
  "maintainers": [
    {
      "email": "charlie.robbins@gmail.com",
      "name": "indexzero"
    }
  ],
  "name": "schema-org",
  "optionalDependencies": {},
  "readme": "# node-schema-org\n\nA node.js library that retrieves, parses and provides all schemas from schema.org\n\n## Installation\n\n### Installing npm (node package manager)\n```\n  curl http://npmjs.org/install.sh | sh\n```\n\n### Installing node-schema-org\n```\n  [sudo] npm install schema-org\n```\n\n## Motivation\nAlthough there is some debate from the W3C et al right now, when I came across [schema.org][0] I thought: \"wow, what a gold mine of potential data formats to use in my applications.\" Then I looked at the site and thought: **\"Y U NO GIVE ME JSON FORMAT!?!?!\"** So I wrote this. It uses some other awesome node.js libraries:\n\n* [jsdom](http://github.com/tmpvar/jsdom): CommonJS implementation of the DOM intended to be platform independent and as minimal/light as possible while completely adhering to the w3c DOM specifications.\n* [neuron](http://github.com/indexzero/neuron): The simplest possible event driven job manager, FIFO queue, and \"task based cache\" in node.js\n* [optimist](http://github.com/substack/node-optimist): Light-weight option parsing for node.js\n* [request](http://github.com/mikeal/request): Simplified HTTP request client.\n* [winston](http://github.com/indexzero/winston): A multi-transport async logging library for node.js\n\n## Usage\nRight now, `node-schema-org` is implemented as a bin script which can be run after you install this module: \n\n``` bash\n  $ read-schema-org\n```\n\nHere is a sample of the output (all of the pre-parsed schemas are available [here](http://github.com/indexzero/node-schema-org/tree/master/schemas)): \n\n```\n  warn:   Removing all schemas in /path/to/node-schema-org/schemas\n  info:   Spawning: node /path/to/node-schema-org/list-schemas.js\n  info:   Contacting: http://schema.org/docs/full.html\n  info:   Parsing: http://schema.org/docs/full.html\n  info:   Reading: http://schema.org/docs/full.html\n  info:   Saving results to: /path/to/node-schema-org/schemas/schema-list.json\n  info:   Done creating /path/to/node-schema-org/schemas/schema-list.json from http://schema.org/docs/full.html\n  info:   node /path/to/node-schema-org/list-schemas.js has exited.\n  info:   Spawning: node /path/to/node-schema-org/read-schema.js --type DataType\n  info:   Spawning: node /path/to/node-schema-org/read-schema.js --type Boolean\n  info:   Spawning: node /path/to/node-schema-org/read-schema.js --type Date\n  (....)\n  info:   Parsing Type: Place\n  info:   Parsing Type: Organization\n  info:   Parsing Type: LocalBusiness\n  info:   Writing schema: /path/to/node-schema-org/schemas/localbusiness.json\n  info:   Done parsing schema: /path/to/node-schema-org/schemas/localbusiness.json\n  info:   node /path/to/node-schema-org/read-schema.js --type LocalBusiness has exited.\n  info:   \n  info:   Done parsing all schemas from schema.org\n  info:   They are located in: /path/to/node-schema-org/schemas\n  info:   \n```\n\n## Sample Schema \n\n``` js\n  {\n    \"type\": \"Place\",\n    \"bases\": {\n      \"Thing\": [\n        {\n          \"name\": \"description\",\n          \"description\": \"A short description of the item.\",\n          \"type\": \"Text\"\n        },\n        {\n          \"name\": \"image\",\n          \"description\": \"URL of an image of the item.\",\n          \"type\": \"URL\"\n        },\n        {\n          \"name\": \"name\",\n          \"description\": \"The name of the item.\",\n          \"type\": \"Text\"\n        },\n        {\n          \"name\": \"url\",\n          \"description\": \"URL of the item.\",\n          \"type\": \"Text\"\n        }\n      ]\n    },\n    \"properties\": [\n      {\n        \"name\": \"address\",\n        \"description\": \"Physical address of the item.\",\n        \"type\": \"PostalAddress\"\n      },\n      {\n        \"name\": \"aggregateRating\",\n        \"description\": \"The overall rating, based on a collection of reviews or ratings, of the item.\",\n        \"type\": \"AggregateRating\"\n      },\n      {\n        \"name\": \"containedIn\",\n        \"description\": \"The basic containment relation between places.\",\n        \"type\": \"Place\"\n      },\n      {\n        \"name\": \"events\",\n        \"description\": \"The events held at this place or organization.\",\n        \"type\": \"Event\"\n      },\n      {\n        \"name\": \"faxNumber\",\n        \"description\": \"The fax number.\",\n        \"type\": \"Text\"\n      },\n      {\n        \"name\": \"geo\",\n        \"description\": \"The geo coordinates of the place.\",\n        \"type\": \"GeoCoordinates\"\n      },\n      {\n        \"name\": \"interactionCount\",\n        \"description\": \"A count of a specific user interactions with this itemâ€”for example, 20 UserLikes, 5 UserComments, or 300 UserDownloads. The user interaction type should be one of the sub types of UserInteraction.\",\n        \"type\": \"Text\"\n      },\n      {\n        \"name\": \"maps\",\n        \"description\": \"A URL to a map of the place.\",\n        \"type\": \"Text\"\n      },\n      {\n        \"name\": \"photos\",\n        \"description\": \"Photographs of this place.\",\n        \"type\": [\n          \"Photograph\",\n          \"ImageObject\"\n        ]\n      },\n      {\n        \"name\": \"reviews\",\n        \"description\": \"Review of the item.\",\n        \"type\": \"Review\"\n      },\n      {\n        \"name\": \"telephone\",\n        \"description\": \"The telephone number.\",\n        \"type\": \"Text\"\n      }\n    ]\n  }\n```\n\n#### Author: [Charlie Robbins][0]\n#### License: MIT\n\n[0]: http://blog.nodejitsu.com",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indexzero/node-schema-org.git"
  },
  "version": "0.2.1"
}
